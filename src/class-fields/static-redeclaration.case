// Copyright (C) 2017 Leo Balter. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.

/*---
desc: Redeclaration of public static fields with the same name
info: |
  2.13.2 Runtime Semantics: ClassDefinitionEvaluation

  ...
  30. Set the value of F's [[Fields]] internal slot to fieldRecords.
  ...
  33. Let result be InitializeStaticFields(F).

  InitializeStaticFields(F)

  3. Let fieldRecords be the value of F's [[Fields]] internal slot.
  4. For each item fieldRecord in order from fieldRecords,
    a. If fieldRecord.[[static]] is true, then
      i. Perform ? DefineField(F, fieldRecord).

template: default
includes: [propertyHelper.js, compareArray.js]
---*/

//- setup
var x = [];
//- fields
static y = (x.push("a"), "old_value");
static ["y"] = (x.push("b"), "another_value");
static "y" = (x.push("c"), "same_value");
static y = (x.push("d"), "same_value");
//- assertions
assert.sameValue(Object.hasOwnProperty.call(C.prototype, "y"), false);

verifyProperty(C, "y", {
  value: "same_value",
  enumerable: true,
  writable: true,
  configurable: true
});

assert(compareArray(x, ["a", "b", "c", "d"]));

var c = new C();
assert.sameValue(Object.hasOwnProperty.call(c, "y"), false);

assert(compareArray(x, ["a", "b", "c", "d"]), "static fields are not redefined on class instatiation");
